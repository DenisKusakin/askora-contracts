#include "constants.fc";
#include "op-codes.fc";
#include "imports/stdlib.fc";

(slice, slice, cell, cell, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    var (owner, service_owner_addr, question_code, question_ref_code) = (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref(), ds~load_ref());
    if (ds.slice_bits() > 0) {
        return (owner, service_owner_addr, question_code, question_ref_code, ds~load_uint(32), ds~load_uint(32), ds~load_coins());
    } else {
        return (owner, service_owner_addr, question_code, question_ref_code, null(), null(), null());
    }
}

() store_data(slice service_owner_addr, slice owner, cell question_code, cell question_ref_code, int next_assigned_question_idx, int next_submitted_question_idx, int min_price) impure {
    set_data(
        begin_cell()
            .store_slice(owner)
            .store_slice(service_owner_addr)
            .store_ref(question_code)
            .store_ref(question_ref_code)
            .store_uint(next_assigned_question_idx, 32)
            .store_uint(next_submitted_question_idx, 32)
            .store_coins(min_price)
            .end_cell()
    );
}

cell calculate_question_state_init(slice parent_addr, int id, cell question_code) {
    cell data = begin_cell()
        .store_slice(parent_addr)
        .store_uint(id, 32)
        .end_cell();

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(question_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_adddress_by_state_init(cell state_init) {
    return begin_cell().store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice deploy_question(cell content, slice submitter_addr, slice owner_addr, slice service_owner_addr, int id, cell question_code, int amount, int price) impure {
    cell state_init = calculate_question_state_init(my_address(), id, question_code);
    slice question_address = calculate_adddress_by_state_init(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(question_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell()
            .store_uint(op::deploy_question, 32)
            .store_ref(content)
            .store_slice(submitter_addr)
            .store_ref(begin_cell()
                .store_slice(owner_addr)
                .store_slice(service_owner_addr)
                .store_coins(price)
                .end_cell())
            .end_cell()
        );

    send_raw_message(msg.end_cell(), 1);

    return question_address;
}

slice get_question_addr(int id) impure method_id {
    var (_, _, question_code, _, _, _, _) = load_data();

    return calculate_adddress_by_state_init(calculate_question_state_init(my_address(), id, question_code));
}

int get_next_id() method_id {
    var (_, _, _, _, next_id, _, _) = load_data();

    return next_id;
}

int get_next_submitted_question_id() method_id {
    var (_, _, _, _, _, next_id, _) = load_data();

    return next_id;
}

int get_price() method_id {
    var (_, _, _, _, _, _, price) = load_data();

    return price;
}

() send_excess(slice addr, int amount) impure {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(addr)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::excess_return, 32);

    send_raw_message(msg.end_cell(), 0);
}

cell calculate_account_state_init(slice owner_addr, slice service_owner_addr, cell account_code, cell question_code, cell question_ref_code) {
    cell data = begin_cell()
        .store_slice(owner_addr)
        .store_slice(service_owner_addr)
        .store_ref(question_code)
        .store_ref(question_ref_code)
        .end_cell();

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(account_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

cell calculate_question_ref_state_init(cell question_ref_code, slice parent_account_addr, int id) {
    cell data = begin_cell()
        .store_slice(parent_account_addr)
        .store_uint(id, 32)
        .end_cell();

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(question_ref_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}


slice get_submitted_question_address(int id) method_id {
    (_, _, _, cell question_ref_code, _, _, _) = load_data();
    cell state_init = calculate_question_ref_state_init(question_ref_code, my_address(), id);
    return calculate_adddress_by_state_init(state_init);
}

cell get_all_data() method_id {
    (slice owner, slice service_owner, cell question_code, cell question_ref_code,
        int next_question_idx, int next_submitted_question_idx, int min_price) = load_data();
    return begin_cell()
        .store_slice(owner)
        .store_coins(min_price)
        .store_uint(next_question_idx, 32)
        .store_uint(next_submitted_question_idx, 32)
        .end_cell();
}

() deploy_question_ref(cell question_ref_code, slice parent_account_addr, int id, slice question_addr) impure {
    cell state_init = calculate_question_ref_state_init(question_ref_code, parent_account_addr, id);
    slice addr = calculate_adddress_by_state_init(state_init);

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(addr)
        .store_coins(min_question_ref_contract_balance)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell()
            .store_slice(question_addr)
            .end_cell()
        );
    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender_addr = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee

    int op = in_msg_body~load_uint(32);

    (slice owner, slice service_owner_addr, cell question_code, cell question_ref_code,
        int next_question_idx, int next_submitted_question_idx, int min_price) = load_data();

    if (op == op::deploy_account & null?(next_question_idx)) {
        ;; throw_unless(403, equal_slices(sender_addr, service_owner_addr));
        int min_price_from_msg = in_msg_body~load_coins();

        store_data(service_owner_addr, owner, question_code, question_ref_code, 0, 0, min_price_from_msg);
        if (my_balance > min_account_contract_balance) {
            int excess_amount = my_balance - min_account_contract_balance;
            send_excess(owner, excess_amount);
        } else {
            throw_if(405, my_balance < min_account_contract_balance); ;;not enough coins in transaction
        }
        return ();
    }
    if (op == op::update_price) {
        throw_unless(403, equal_slices(sender_addr, owner));
        int new_price = in_msg_body~load_coins();
        store_data(service_owner_addr, owner, question_code, question_ref_code,
            next_question_idx, next_submitted_question_idx, new_price);
        return ();
    }
    if (op == op::create_question) {
        throw_if(403, equal_slices(sender_addr, owner));

        int service_fee = muldiv(min_price, 5, 100);

        int coins_to_keep_on_this_acc = 0;
        if (my_balance - msg_value < min_account_contract_balance) {
            coins_to_keep_on_this_acc = min_account_contract_balance - (my_balance - msg_value);
        }

        int min_notification_amount = min_account_contract_balance + min_question_ref_contract_balance;
        int question_contract_amount = min_price + service_fee + min_question_contract_balance + notification_amount;
        throw_if(405, msg_value < question_contract_amount + min_notification_amount + coins_to_keep_on_this_acc);

        cell content = in_msg_body~load_ref();
        slice question_contract_addr = deploy_question(
            content, sender_addr, owner,
            service_owner_addr, next_question_idx, question_code,
            question_contract_amount, min_price
        );
        store_data(service_owner_addr, owner, question_code, question_ref_code,
            next_question_idx + 1, next_submitted_question_idx, min_price);

        ;; Notify other account
        slice q_sender_addr = sender_addr;
        cell sender_account_state_init = calculate_account_state_init(
            q_sender_addr, service_owner_addr, my_code(), question_code, question_ref_code);

        slice sender_account_addr = calculate_adddress_by_state_init(sender_account_state_init);
        ;; calculate remaining value
        int msg_remaining_value = msg_value - question_contract_amount - coins_to_keep_on_this_acc;

        var notify_msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_account_addr)
            .store_coins(msg_remaining_value)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(sender_account_state_init)
            .store_ref(begin_cell()
                .store_uint(op::question_deployed, 32)
                .store_slice(owner)
                .store_slice(question_contract_addr)
                .end_cell()
            );
        send_raw_message(notify_msg.end_cell(), 0);

        return ();
    }
    if (op == op::question_deployed) {
        slice question_woner_from_msg = in_msg_body~load_msg_addr();
        slice question_addr_from_msg = in_msg_body~load_msg_addr();

        slice expected_sender_addr = calculate_adddress_by_state_init(calculate_account_state_init(
            question_woner_from_msg,
            service_owner_addr,
            my_code(),
            question_code,
            question_ref_code
        ));
        throw_unless(403, equal_slices(sender_addr, expected_sender_addr));
        var next_question_idx_2 = next_question_idx;
        var next_submitted_question_idx_2 = next_submitted_question_idx;
        var min_price_2 = min_price;
        if (null?(next_question_idx_2)) {
            next_question_idx_2 = 0;
        }
        if (null?(next_submitted_question_idx_2)) {
            next_submitted_question_idx_2 = 0;
        }
        if (null?(min_price_2)) {
            min_price_2 = 0;
        }
        deploy_question_ref(
            question_ref_code, my_address(),
            next_submitted_question_idx_2, question_addr_from_msg);
        store_data(
            service_owner_addr, owner, question_code,
            question_ref_code, next_question_idx_2,
            next_submitted_question_idx_2 + 1, min_price_2);
        ;; return excess to the account owner
        if (my_balance > min_account_contract_balance) {
            var excess_msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(owner)
                .store_coins(my_balance - min_account_contract_balance)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op, 32)
                .end_cell();
            send_raw_message(excess_msg, 0);
        }

        return ();
    }
    throw(404);
}
